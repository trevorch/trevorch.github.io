<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zircon on Trevorch</title>
    <link>https://trevorch.github.io/categories/zircon/</link>
    <description>Recent content in Zircon on Trevorch</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <lastBuildDate>Wed, 22 Apr 2020 16:25:24 +0800</lastBuildDate>
    
	<atom:link href="https://trevorch.github.io/categories/zircon/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>内核对象：权限</title>
      <link>https://trevorch.github.io/post/fuchsia/kernel/rights/</link>
      <pubDate>Wed, 22 Apr 2020 16:25:24 +0800</pubDate>
      
      <guid>https://trevorch.github.io/post/fuchsia/kernel/rights/</guid>
      <description>权限与句柄相关联，并表达了对关联句柄或关联句柄的对象执行操作的权限。 &amp;lt;zircon/rights.h&amp;gt;头部文件定义了各种类型对象</description>
    </item>
    
    <item>
      <title>内核对象：句柄</title>
      <link>https://trevorch.github.io/post/fuchsia/kernel/handles/</link>
      <pubDate>Wed, 22 Apr 2020 00:42:26 +0800</pubDate>
      
      <guid>https://trevorch.github.io/post/fuchsia/kernel/handles/</guid>
      <description>主要内容 基础 使用句柄 垃圾回收 特殊情况 无效句柄及句柄重用 基础 句柄是一种内核结构，它使得用户模式程序可以引用内核对象。句柄可以看作是到特定内核对</description>
    </item>
    
    <item>
      <title>Zircon 与 LK</title>
      <link>https://trevorch.github.io/post/fuchsia/kernel/zx_and_lk/</link>
      <pubDate>Wed, 22 Apr 2020 00:26:16 +0800</pubDate>
      
      <guid>https://trevorch.github.io/post/fuchsia/kernel/zx_and_lk/</guid>
      <description>Zircon是LK的一个分支，它的许多内部结构都是基于LK的，而上层则是新的。例如，Zircon有进程的概念，而LK没有。 然而，Zircon</description>
    </item>
    
    <item>
      <title>Zircon 内核概念</title>
      <link>https://trevorch.github.io/post/fuchsia/kernel/concepts/</link>
      <pubDate>Mon, 20 Apr 2020 23:47:04 +0800</pubDate>
      
      <guid>https://trevorch.github.io/post/fuchsia/kernel/concepts/</guid>
      <description>主要内容 简介 系统调用 句柄及权限 内核对象ID 运行中的代码:Job,Process,Thread 消息传递:Socket及Channel 对象及信号</description>
    </item>
    
  </channel>
</rss>