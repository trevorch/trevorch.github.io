<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Posts on Trevorch</title>
    <link>http://chendm.gitee.io/blog/cn/post/</link>
    <description>Recent content in Posts on Trevorch</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <managingEditor>passeam@gmail.com (Trevorch)</managingEditor>
    <webMaster>passeam@gmail.com (Trevorch)</webMaster>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Wed, 13 May 2020 18:39:05 +0800</lastBuildDate>
    
        <atom:link href="http://chendm.gitee.io/blog/cn/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    

      
      <item>
        <title>Class和ClassLoader的getResource()方法的差别</title>
        <link>http://chendm.gitee.io/blog/cn/post/java/getresource/</link>
        <pubDate>Wed, 13 May 2020 18:39:05 +0800</pubDate>
        <author>passeam@gmail.com (Trevorch)</author>
        <atom:modified>Wed, 13 May 2020 18:39:05 +0800</atom:modified>
        <guid>http://chendm.gitee.io/blog/cn/post/java/getresource/</guid>
        <description>源码： public class Name { public static void main(String[] args) { System.out.println(&amp;quot;Name.class location: src/main/java/first&amp;quot;); System.out.println(&amp;quot;class.getResource(\&amp;quot;\&amp;quot;):&amp;quot;+Name.class.getResource(&amp;quot;&amp;quot;)); System.out.println(&amp;quot;class.getResource(\&amp;quot;/\&amp;quot;):&amp;quot;+Name.class.getResource(&amp;quot;/&amp;quot;)); System.out.println(&amp;quot;***********************************************&amp;quot;); System.out.println(&amp;quot;class.getResource(\&amp;quot;first.txt\&amp;quot;):&amp;quot;+Name.class.getResource(&amp;quot;first.txt&amp;quot;)); System.out.println(&amp;quot;class.getResource(\&amp;quot;first/first.txt\&amp;quot;):&amp;quot;+Name.class.getResource(&amp;quot;first/first.txt&amp;quot;)); System.out.println(&amp;quot;class.getResource(\&amp;quot;/first.txt\&amp;quot;):&amp;quot;+Name.class.getResource(&amp;quot;/first.txt&amp;quot;)); System.out.println(&amp;quot;class.getResource(\&amp;quot;/first/first.txt\&amp;quot;):&amp;quot;+Name.class.getResource(&amp;quot;/first/first.txt&amp;quot;)); System.out.println(&amp;quot;class.getResource(\&amp;quot;second/second.txt\&amp;quot;):&amp;quot;+Name.class.getResource(&amp;quot;second/second.txt&amp;quot;)); System.out.println(&amp;quot;class.getResource(\&amp;quot;/second/second.txt\&amp;quot;):&amp;quot;+Name.class.getResource(&amp;quot;/second/second.txt&amp;quot;)); System.out.println(&amp;quot;class.getResource(\&amp;quot;/first/second/second.txt\&amp;quot;):&amp;quot;+Name.class.getResource(&amp;quot;/first/second/second.txt&amp;quot;)); System.out.println(&amp;quot;class.getResource(\&amp;quot;root.txt\&amp;quot;:)&amp;quot;+Name.class.getResource(&amp;quot;root.txt&amp;quot;)); System.out.println(&amp;quot;class.getResource(\&amp;quot;/root.txt\&amp;quot;:)&amp;quot;+Name.class.getResource(&amp;quot;/root.txt&amp;quot;)); System.out.println(&amp;quot;***********************************************&amp;quot;); System.out.println(&amp;quot;class.getClassLoader().getResource(\&amp;quot;\&amp;quot;):&amp;quot;+Name.class.getClassLoader().getResource(&amp;quot;&amp;quot;)); System.out.println(&amp;quot;class.getClassLoader().getResource(\&amp;quot;/\&amp;quot;):&amp;quot;+Name.class.getClassLoader().getResource(&amp;quot;/&amp;quot;)); System.out.println(&amp;quot;class.getClassLoader().getResource(\&amp;quot;first.txt\&amp;quot;):&amp;quot;+Name.class.getClassLoader().getResource(&amp;quot;first.txt&amp;quot;)); System.out.println(&amp;quot;class.getClassLoader().getResource(\&amp;quot;first/first.txt\&amp;quot;):&amp;quot;+Name.class.getClassLoader().getResource(&amp;quot;first/first.txt&amp;quot;)); System.out.println(&amp;quot;class.getClassLoader().getResource(\&amp;quot;second.txt\&amp;quot;):&amp;quot;+Name.class.getClassLoader().getResource(&amp;quot;second.txt&amp;quot;)); System.out.println(&amp;quot;class.getClassLoader().getResource(\&amp;quot;second/second.txt\&amp;quot;):&amp;quot;+Name.class.getClassLoader().getResource(&amp;quot;second/second.txt&amp;quot;)); System.out.println(&amp;quot;class.getClassLoader().getResource(\&amp;quot;first/second/second.txt\&amp;quot;):&amp;quot;+Name.class.getClassLoader().getResource(&amp;quot;first/second/second.txt&amp;quot;)); System.out.println(&amp;quot;class.getClassLoader().getResource(\&amp;quot;root.txt\&amp;quot;):&amp;quot;+Name.class.getClassLoader().getResource(&amp;quot;root.txt&amp;quot;)); System.out.println(&amp;quot;class.getClassLoader().getResource(\&amp;quot;/root.txt\&amp;quot;):&amp;quot;+Name.class.getClassLoader().getResource(&amp;quot;/root.txt&amp;quot;)); } } 运行结果： Name.class location: src/main/java/first class.getResource(&amp;quot;&amp;quot;):file:/E:/Java/validation/build/classes/java/main/first/ class.getResource(&amp;quot;/&amp;quot;):file:/E:/Java/validation/build/classes/java/main/ *********************************************** class.getResource(&amp;quot;first.txt&amp;quot;):file:/E:/Java/validation/build/resources/main/first/first.txt class.getResource(&amp;quot;first/first.txt&amp;quot;):null class.getResource(&amp;quot;/first.txt&amp;quot;):null class.getResource(&amp;quot;/first/first.txt&amp;quot;):file:/E:/Java/validation/build/resources/main/first/first.txt class.getResource(&amp;quot;second/second.txt&amp;quot;):file:/E:/Java/validation/build/resources/main/first/second/second.txt class.getResource(&amp;quot;/second/second.txt&amp;quot;):null class.getResource(&amp;quot;/first/second/second.txt&amp;quot;):file:/E:/Java/validation/build/resources/main/first/second/second.txt class.getResource(&amp;quot;root.txt&amp;quot;:)null class.getResource(&amp;quot;/root.txt&amp;quot;:)file:/E:/Java/validation/build/resources/main/root.txt *********************************************** class.getClassLoader().getResource(&amp;quot;&amp;quot;):file:/E:/Java/validation/build/classes/java/main/ class.getClassLoader().getResource(&amp;quot;/&amp;quot;):null class.getClassLoader().getResource(&amp;quot;first.txt&amp;quot;):null class.getClassLoader().getResource(&amp;quot;first/first.txt&amp;quot;):file:/E:/Java/validation/build/resources/main/first/first.txt class.getClassLoader().getResource(&amp;quot;second.txt&amp;quot;):null class.getClassLoader().getResource(&amp;quot;second/second.txt&amp;quot;):null class.getClassLoader().getResource(&amp;quot;first/second/second.txt&amp;quot;):file:/E:/Java/validation/build/resources/main/first/second/second.txt class.getClassLoader().getResource(&amp;quot;root.txt&amp;quot;):file:/E:/Java/validation/build/resources/main/root.txt class.getClassLoader().getResource(&amp;quot;/root.txt&amp;quot;):null</description>
        
        <dc:creator>Trevorch</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title>Organizing Gradle Project</title>
        <link>http://chendm.gitee.io/blog/cn/post/gradle/organizing-gradle-project/</link>
        <pubDate>Wed, 13 May 2020 14:05:40 +0800</pubDate>
        <author>passeam@gmail.com (Trevorch)</author>
        <atom:modified>Wed, 13 May 2020 14:05:40 +0800</atom:modified>
        <guid>http://chendm.gitee.io/blog/cn/post/gradle/organizing-gradle-project/</guid>
        <description>按语言分离源码文件夹 Gradle的语言插件使用惯例来发现及编译源码。例如java插件会自动编译位于 src/main/java目录下的代码。其</description>
        
        <dc:creator>Trevorch</dc:creator>
        
        
        
        
          
            
              <category>Gradle</category>
            
          
        
        
          
            
              <category>Gradle</category>
            
          
        
        
      </item>
      
      <item>
        <title>Gradle Build Lifecycle</title>
        <link>http://chendm.gitee.io/blog/cn/post/gradle/build-lifecycle/</link>
        <pubDate>Wed, 13 May 2020 13:40:58 +0800</pubDate>
        <author>passeam@gmail.com (Trevorch)</author>
        <atom:modified>Wed, 13 May 2020 13:40:58 +0800</atom:modified>
        <guid>http://chendm.gitee.io/blog/cn/post/gradle/build-lifecycle/</guid>
        <description>Gradle的核心是基于依赖的编程语言。从gradle的角度看，用户可以定义任务及任务间的依赖。Gradle保证这些任务 按照依赖顺序执行，且</description>
        
        <dc:creator>Trevorch</dc:creator>
        
        
        
        
          
            
              <category>Gradle</category>
            
          
        
        
          
            
              <category>Gradle</category>
            
          
        
        
      </item>
      
      <item>
        <title>PortableApps封装入门</title>
        <link>http://chendm.gitee.io/blog/cn/post/portableapps/get-start/</link>
        <pubDate>Thu, 07 May 2020 12:49:33 +0800</pubDate>
        <author>passeam@gmail.com (Trevorch)</author>
        <atom:modified>Thu, 07 May 2020 12:49:33 +0800</atom:modified>
        <guid>http://chendm.gitee.io/blog/cn/post/portableapps/get-start/</guid>
        <description>准备 我是按照PortableApps的规范来做便携软件的，所以需要用到的工具有： 1、一个虚拟机：这是用来构建一个纯净的系统来安装程序的。可以</description>
        
        <dc:creator>Trevorch</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title>kubectl expose命令</title>
        <link>http://chendm.gitee.io/blog/cn/post/kubernetes/kubectl/expose/</link>
        <pubDate>Mon, 27 Apr 2020 14:46:31 +0800</pubDate>
        <author>passeam@gmail.com (Trevorch)</author>
        <atom:modified>Mon, 27 Apr 2020 14:46:31 +0800</atom:modified>
        <guid>http://chendm.gitee.io/blog/cn/post/kubernetes/kubectl/expose/</guid>
        <description>把资源暴露为一个新的Kubernetes服务 通过名称查找【deployment】, 【service】, 【replica set】, 【repli</description>
        
        <dc:creator>Trevorch</dc:creator>
        
        
        
        
          
            
              <category>Kubernetes</category>
            
          
            
              <category>Kubectl</category>
            
          
            
              <category>Kubectl-Expose</category>
            
          
        
        
          
            
              <category>Kubernetes</category>
            
          
            
              <category>Kubectl</category>
            
          
            
              <category>Kubectl-Expose</category>
            
          
        
        
      </item>
      
      <item>
        <title>Minikube安装&amp;基本使用</title>
        <link>http://chendm.gitee.io/blog/cn/post/kubernetes/minikube/install/</link>
        <pubDate>Sun, 26 Apr 2020 11:39:49 +0800</pubDate>
        <author>passeam@gmail.com (Trevorch)</author>
        <atom:modified>Sun, 26 Apr 2020 11:39:49 +0800</atom:modified>
        <guid>http://chendm.gitee.io/blog/cn/post/kubernetes/minikube/install/</guid>
        <description>下载kubectl &amp;amp; minikube https://storage.googleapis.com/kubernetes-release/release/v1.18.0/bin/windows/amd64/kubectl.exe https://github.com/kubernetes/minikube/releases/download/v1.9.2/minikube-windows-amd64.exe 安装virtualbox 设置环境变量 指定minikube集群的存储位置 MINIKUBE_HOME = F:\minikube 创建并启动kubernetes集群 minikube start</description>
        
        <dc:creator>Trevorch</dc:creator>
        
        
        
        
          
            
              <category>Kubernetes</category>
            
          
            
              <category>Minikube</category>
            
          
            
              <category>Minikube-Install</category>
            
          
        
        
          
            
              <category>Kubernetes</category>
            
          
            
              <category>Minikube</category>
            
          
            
              <category>Minikube-Install</category>
            
          
        
        
      </item>
      
      <item>
        <title>开发：源码及编译</title>
        <link>http://chendm.gitee.io/blog/cn/post/fuchsia/development/download-source/</link>
        <pubDate>Fri, 24 Apr 2020 01:04:24 +0800</pubDate>
        <author>passeam@gmail.com (Trevorch)</author>
        <atom:modified>Fri, 24 Apr 2020 01:04:24 +0800</atom:modified>
        <guid>http://chendm.gitee.io/blog/cn/post/fuchsia/development/download-source/</guid>
        <description>前提条件 docker-machine创建宿主机： dm create -d &amp;quot;virtualbox&amp;quot; --engine-registry-mirror https://3laho3y3.mirror.aliyuncs.com --engine-registry-mirror http://f1361db2.m.daocloud.io --engine-registry-mirror https://reg-mirror.qiniu.com --engine-registry-mirror http://hub-mirror.c.163.com --engine-registry-mirror https://registry.docker-cn.com --engine-registry-mirror https://mirror.ccs.tencentyun.com --engine-registry-mirror https://dockerhub.azk8s.cn --virtualbox-cpu-count &amp;quot;4&amp;quot; --virtualbox-memory &amp;quot;8192&amp;quot; --virtualbox-disk-size &amp;quot;100000&amp;quot; --virtualbox-share-folder &amp;quot;F:\vmshare&amp;quot; --virtualbox-boot2docker-url http://localhost/tool/boot2docker-19.iso vm 创建容器 dm ssh vm docker run -it --name fuchsia-builder --cap-add NET_ADMIN -v /vmshare/share:/root/share ubuntu:latest</description>
        
        <dc:creator>Trevorch</dc:creator>
        
        
        
        
          
            
              <category>Fuchsia</category>
            
          
            
              <category>Fuchsia-Development</category>
            
          
            
              <category>Fuchsia-Download-Source-Code</category>
            
          
        
        
          
            
              <category>Fuchsia</category>
            
          
            
              <category>Fuchsia-Development</category>
            
          
            
              <category>Fuchsia-Download-Source-Code</category>
            
          
        
        
      </item>
      
      <item>
        <title>调度：公平调度器</title>
        <link>http://chendm.gitee.io/blog/cn/post/fuchsia/kernel/fair_scheduler/</link>
        <pubDate>Thu, 23 Apr 2020 18:36:45 +0800</pubDate>
        <author>passeam@gmail.com (Trevorch)</author>
        <atom:modified>Thu, 23 Apr 2020 18:36:45 +0800</atom:modified>
        <guid>http://chendm.gitee.io/blog/cn/post/fuchsia/kernel/fair_scheduler/</guid>
        <description>简介 作为整个调度器开发工作的一部分，Zircon将迁移到一个新的公平调度器作为系统的主要调度器。 本文讨论调度器的属性，以及如何在推出之前对其</description>
        
        <dc:creator>Trevorch</dc:creator>
        
        
        
        
          
            
              <category>Zircon</category>
            
          
            
              <category>Kernel</category>
            
          
            
              <category>Kernel-scheduling</category>
            
          
            
              <category>Fair-scheduler</category>
            
          
        
        
          
            
              <category>Fuchsia</category>
            
          
            
              <category>Zircon</category>
            
          
            
              <category>Kernel</category>
            
          
            
              <category>Kernel-scheduling</category>
            
          
            
              <category>Fair-scheduler</category>
            
          
        
        
      </item>
      
      <item>
        <title>调度：Zircon调度</title>
        <link>http://chendm.gitee.io/blog/cn/post/fuchsia/kernel/kernel_scheduling/</link>
        <pubDate>Thu, 23 Apr 2020 17:48:32 +0800</pubDate>
        <author>passeam@gmail.com (Trevorch)</author>
        <atom:modified>Thu, 23 Apr 2020 17:48:32 +0800</atom:modified>
        <guid>http://chendm.gitee.io/blog/cn/post/fuchsia/kernel/kernel_scheduling/</guid>
        <description>背景 任何调度器的主要职责是在希望使用处理器时间的所有线程之间共享有限的处理器时间资源。 在通用操作系统中，它试图以一种公平的方式做到这一点，以</description>
        
        <dc:creator>Trevorch</dc:creator>
        
        
        
        
          
            
              <category>Zircon</category>
            
          
            
              <category>Kernel</category>
            
          
            
              <category>Kernel-scheduling</category>
            
          
            
              <category>Zircon-scheduling</category>
            
          
        
        
          
            
              <category>Fuchsia</category>
            
          
            
              <category>Zircon</category>
            
          
            
              <category>Kernel</category>
            
          
            
              <category>Kernel-scheduling</category>
            
          
            
              <category>Zircon-scheduling</category>
            
          
        
        
      </item>
      
      <item>
        <title>系统调用：Vdso</title>
        <link>http://chendm.gitee.io/blog/cn/post/fuchsia/kernel/vdso/</link>
        <pubDate>Thu, 23 Apr 2020 14:40:23 +0800</pubDate>
        <author>passeam@gmail.com (Trevorch)</author>
        <atom:modified>Thu, 23 Apr 2020 14:40:23 +0800</atom:modified>
        <guid>http://chendm.gitee.io/blog/cn/post/fuchsia/kernel/vdso/</guid>
        <description>vDSO是访问Zircon系统调用的唯一方法。vDSO表示虚拟动态共享对象。动态共享对象是ELF(Executable Linkable Format)格式中</description>
        
        <dc:creator>Trevorch</dc:creator>
        
        
        
        
          
            
              <category>Zircon</category>
            
          
            
              <category>Kernel</category>
            
          
            
              <category>System-Call</category>
            
          
            
              <category>Vdso</category>
            
          
        
        
          
            
              <category>Fuchsia</category>
            
          
            
              <category>Zircon</category>
            
          
            
              <category>Kernel</category>
            
          
            
              <category>System-Call</category>
            
          
            
              <category>Vdso</category>
            
          
        
        
      </item>
      
      <item>
        <title>内核对象：Signals</title>
        <link>http://chendm.gitee.io/blog/cn/post/fuchsia/kernel/signals/</link>
        <pubDate>Wed, 22 Apr 2020 17:43:33 +0800</pubDate>
        <author>passeam@gmail.com (Trevorch)</author>
        <atom:modified>Wed, 22 Apr 2020 17:43:33 +0800</atom:modified>
        <guid>http://chendm.gitee.io/blog/cn/post/fuchsia/kernel/signals/</guid>
        <description>主要内容 简介 状态、状态变更及术语 观察信号 合成信号 用户信号 简介 信号可等待的内核对象向应用程序暴露的单个比特信息。 每个内核对象可暴露一个或多个信</description>
        
        <dc:creator>Trevorch</dc:creator>
        
        
        
        
          
            
              <category>Zircon</category>
            
          
            
              <category>Kernel</category>
            
          
            
              <category>Kernel-Object</category>
            
          
            
              <category>Signals</category>
            
          
        
        
          
            
              <category>Fuchsia</category>
            
          
            
              <category>Zircon</category>
            
          
            
              <category>Kernel</category>
            
          
            
              <category>Kernel-Object</category>
            
          
            
              <category>Signals</category>
            
          
        
        
      </item>
      
      <item>
        <title>内核对象：权限</title>
        <link>http://chendm.gitee.io/blog/cn/post/fuchsia/kernel/rights/</link>
        <pubDate>Wed, 22 Apr 2020 16:25:24 +0800</pubDate>
        <author>passeam@gmail.com (Trevorch)</author>
        <atom:modified>Wed, 22 Apr 2020 16:25:24 +0800</atom:modified>
        <guid>http://chendm.gitee.io/blog/cn/post/fuchsia/kernel/rights/</guid>
        <description>权限与句柄相关联，并表达此句柄或句柄所引用的对象执行操作的权限。 &amp;lt;zircon/rights.h&amp;gt;头部文件定义了各种类型对象的默</description>
        
        <dc:creator>Trevorch</dc:creator>
        
        
        
        
          
            
              <category>Zircon</category>
            
          
            
              <category>Kernel</category>
            
          
            
              <category>Kernel-Object</category>
            
          
            
              <category>Rights</category>
            
          
        
        
          
            
              <category>Fuchsia</category>
            
          
            
              <category>Zircon</category>
            
          
            
              <category>Kernel</category>
            
          
            
              <category>Kernel-Object</category>
            
          
            
              <category>Rights</category>
            
          
        
        
      </item>
      
      <item>
        <title>内核对象：句柄</title>
        <link>http://chendm.gitee.io/blog/cn/post/fuchsia/kernel/handles/</link>
        <pubDate>Wed, 22 Apr 2020 00:42:26 +0800</pubDate>
        <author>passeam@gmail.com (Trevorch)</author>
        <atom:modified>Wed, 22 Apr 2020 00:42:26 +0800</atom:modified>
        <guid>http://chendm.gitee.io/blog/cn/post/fuchsia/kernel/handles/</guid>
        <description>主要内容 基础 使用句柄 垃圾回收 特殊情况 无效句柄及句柄重用 基础 句柄是一种内核结构，它使得用户模式程序可以引用内核对象。句柄可以看作是到特定内核对</description>
        
        <dc:creator>Trevorch</dc:creator>
        
        
        
        
          
            
              <category>Zircon</category>
            
          
            
              <category>Kernel</category>
            
          
            
              <category>Kernel-Object</category>
            
          
            
              <category>Handle</category>
            
          
        
        
          
            
              <category>Fuchsia</category>
            
          
            
              <category>Zircon</category>
            
          
            
              <category>Kernel</category>
            
          
            
              <category>Kernel-Object</category>
            
          
            
              <category>Handle</category>
            
          
        
        
      </item>
      
      <item>
        <title>Zircon 与 LK</title>
        <link>http://chendm.gitee.io/blog/cn/post/fuchsia/kernel/zx_and_lk/</link>
        <pubDate>Wed, 22 Apr 2020 00:26:16 +0800</pubDate>
        <author>passeam@gmail.com (Trevorch)</author>
        <atom:modified>Wed, 22 Apr 2020 00:26:16 +0800</atom:modified>
        <guid>http://chendm.gitee.io/blog/cn/post/fuchsia/kernel/zx_and_lk/</guid>
        <description>Zircon是LK的一个分支，它的许多内部结构都是基于LK的，而上层则是新的。例如，Zircon有进程的概念，而LK没有。 然而，Zircon</description>
        
        <dc:creator>Trevorch</dc:creator>
        
        
        
        
          
            
              <category>Zircon</category>
            
          
            
              <category>Kernel</category>
            
          
            
              <category>LK</category>
            
          
        
        
          
            
              <category>Fuchsia</category>
            
          
            
              <category>Zircon</category>
            
          
            
              <category>LK</category>
            
          
        
        
      </item>
      
      <item>
        <title>Zircon 内核概念</title>
        <link>http://chendm.gitee.io/blog/cn/post/fuchsia/kernel/concepts/</link>
        <pubDate>Mon, 20 Apr 2020 23:47:04 +0800</pubDate>
        <author>passeam@gmail.com (Trevorch)</author>
        <atom:modified>Mon, 20 Apr 2020 23:47:04 +0800</atom:modified>
        <guid>http://chendm.gitee.io/blog/cn/post/fuchsia/kernel/concepts/</guid>
        <description>主要内容 简介 系统调用 句柄及权限 内核对象ID 运行中的代码:Job,Process,Thread 消息传递:Socket及Channel 对象及信号</description>
        
        <dc:creator>Trevorch</dc:creator>
        
        
        
        
          
            
              <category>Zircon</category>
            
          
            
              <category>Kernel</category>
            
          
        
        
          
            
              <category>Fuchsia</category>
            
          
            
              <category>Zircon</category>
            
          
        
        
      </item>
      
      <item>
        <title>Archlinux 安装及配置</title>
        <link>http://chendm.gitee.io/blog/cn/post/linux/archlinux/install/</link>
        <pubDate>Sat, 28 Mar 2020 12:40:24 +0800</pubDate>
        <author>passeam@gmail.com (Trevorch)</author>
        <atom:modified>Sat, 28 Mar 2020 12:40:24 +0800</atom:modified>
        <guid>http://chendm.gitee.io/blog/cn/post/linux/archlinux/install/</guid>
        <description>下载Archlinux ISO镜像 http://mirrors.163.com/archlinux/iso/2020.03.01/archlinux-2020.03.01-x86_64.iso 安装VirtualBox https://download.virtualbox.org/virtualbox/6.1.4/VirtualBox-6.1.4-136177-Win.exe 创建VirtualBox虚拟机，并挂载Archlinux镜像，启动虚拟机 分区 分区</description>
        
        <dc:creator>Trevorch</dc:creator>
        
        
        
        
          
            
              <category>Archlinux</category>
            
          
            
              <category>Linux</category>
            
          
        
        
          
            
              <category>Linux</category>
            
          
        
        
      </item>
      
      <item>
        <title>M0 M1 M2 M3</title>
        <link>http://chendm.gitee.io/blog/cn/post/monetary-economics/m0-m1-m2-m3/</link>
        <pubDate>Sun, 22 Mar 2020 11:49:42 +0800</pubDate>
        <author>passeam@gmail.com (Trevorch)</author>
        <atom:modified>Sun, 22 Mar 2020 11:49:42 +0800</atom:modified>
        <guid>http://chendm.gitee.io/blog/cn/post/monetary-economics/m0-m1-m2-m3/</guid>
        <description>基础概念 利率 也称“利息率”，指一定时期内利息额与本金额的比率。利率有年利率、月利率和日利率三种表现形式： 年利率：按本金百分比表示，在中国称为</description>
        
        <dc:creator>Trevorch</dc:creator>
        
        
        
        
          
            
              <category>M0</category>
            
          
            
              <category>M1</category>
            
          
            
              <category>M2</category>
            
          
            
              <category>M3</category>
            
          
        
        
          
            
              <category>monetary-economics</category>
            
          
        
        
      </item>
      
      <item>
        <title>Go 程序编译成不同平台的执行文件</title>
        <link>http://chendm.gitee.io/blog/cn/post/go/env/compile/</link>
        <pubDate>Thu, 19 Mar 2020 19:42:17 +0800</pubDate>
        <author>passeam@gmail.com (Trevorch)</author>
        <atom:modified>Thu, 19 Mar 2020 19:42:17 +0800</atom:modified>
        <guid>http://chendm.gitee.io/blog/cn/post/go/env/compile/</guid>
        <description>Go程序可编译成不同平台的可执行文件 set GOARCH=amd64 set GOOS=linux go build xx.go 这样生成的文件没有任何依赖，直接运行就可以了！</description>
        
        <dc:creator>Trevorch</dc:creator>
        
        
        
        
          
            
              <category>Go</category>
            
          
        
        
          
            
              <category>go</category>
            
          
        
        
      </item>
      
      <item>
        <title>Docker Machine 安装及配置</title>
        <link>http://chendm.gitee.io/blog/cn/post/docker/machine/install/</link>
        <pubDate>Wed, 18 Mar 2020 10:53:44 +0800</pubDate>
        <author>passeam@gmail.com (Trevorch)</author>
        <atom:modified>Wed, 18 Mar 2020 10:53:44 +0800</atom:modified>
        <guid>http://chendm.gitee.io/blog/cn/post/docker/machine/install/</guid>
        <description>安装VirtualBox https://download.virtualbox.org/virtualbox/6.1.4/VirtualBox-6.1.4-136177-Win.exe 下载 Docker Machine https://github.com/docker/machine/releases/download/v0.16.2/docker-machine-Windows-x86_64.exe 放置至 D:\Docker\Machine\0.16.2 并重命名为 dm.exe 配置环境变量 把 D:\Docker\Machine\0.16.2 添加到path环境变量； 删除path环境变量中带OpenSSH的项，</description>
        
        <dc:creator>Trevorch</dc:creator>
        
        
        
        
          
            
              <category>Docker</category>
            
          
            
              <category>Docker Machine</category>
            
          
        
        
          
            
              <category>docker</category>
            
          
        
        
      </item>
      
      <item>
        <title>Markdown 手册</title>
        <link>http://chendm.gitee.io/blog/cn/post/markdown/manual/</link>
        <pubDate>Wed, 18 Mar 2020 10:53:44 +0800</pubDate>
        <author>passeam@gmail.com (Trevorch)</author>
        <atom:modified>Wed, 18 Mar 2020 10:53:44 +0800</atom:modified>
        <guid>http://chendm.gitee.io/blog/cn/post/markdown/manual/</guid>
        <description>主要内容 Markdown是什么？ 谁创造了它？ 为什么要使用它？ 怎么使用？ 谁在用？ 尝试一下 正文 1. Markdown是什么？ Markdown是一种轻</description>
        
        <dc:creator>Trevorch</dc:creator>
        
        
        
        
          
            
              <category>Markdown</category>
            
          
        
        
          
            
              <category>manual</category>
            
          
        
        
      </item>
      

    
  </channel>
</rss>