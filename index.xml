<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Trevorch</title>
    <link>https://trevorch.github.io/</link>
    <description>Recent content on Trevorch</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <lastBuildDate>Sun, 20 Aug 2017 21:38:52 +0800</lastBuildDate>
    
        <atom:link href="https://trevorch.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于</title>
      <link>https://trevorch.github.io/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>https://trevorch.github.io/about/</guid>
      
        <description>&lt;p&gt;Hugo is a static site engine written in Go.&lt;/p&gt;
&lt;p&gt;It makes use of a variety of open source projects including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cobra&#34;&gt;Cobra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/viper&#34;&gt;Viper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/jWalterWeatherman&#34;&gt;J Walter Weatherman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cast&#34;&gt;Cast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Learn more and contribute on &lt;a href=&#34;https://github.com/gohugoio&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://user.xupng.cn//link/ZaUZbKeuvu8AFheY?mu=2&#34;&gt;https://user.xupng.cn//link/ZaUZbKeuvu8AFheY?mu=2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://xxoo.men/link/K8NXTngqHox1nogn?mu=2&#34;&gt;https://xxoo.men/link/K8NXTngqHox1nogn?mu=2&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>内核对象：句柄</title>
      <link>https://trevorch.github.io/post/fuchsia/kernel/handles/</link>
      <pubDate>Wed, 22 Apr 2020 00:42:26 +0800</pubDate>
      
      <guid>https://trevorch.github.io/post/fuchsia/kernel/handles/</guid>
      
        <description>&lt;h2 id=&#34;主要内容&#34;&gt;主要内容&lt;/h2&gt;
&lt;blockquote&gt;
&lt;h6 id=&#34;基础&#34;&gt;基础&lt;/h6&gt;
&lt;h6 id=&#34;使用句柄&#34;&gt;使用句柄&lt;/h6&gt;
&lt;h6 id=&#34;垃圾回收&#34;&gt;垃圾回收&lt;/h6&gt;
&lt;h6 id=&#34;特殊情况&#34;&gt;特殊情况&lt;/h6&gt;
&lt;h6 id=&#34;无效句柄及句柄重用&#34;&gt;无效句柄及句柄重用&lt;/h6&gt;
&lt;h6 id=&#34;更多&#34;&gt;更多&lt;/h6&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;基础-1&#34;&gt;基础&lt;/h4&gt;
&lt;p&gt;句柄是一种内核结构，它使得用户模式程序可以引用内核对象。句柄可以看作是到特定内核对象的会话或连接。&lt;/p&gt;
&lt;p&gt;通常情况下，多个进程通过不同的句柄并发地访问同一个内核对象。但是，单个句柄只能绑定到单个进程或绑定到内核。&lt;/p&gt;
&lt;p&gt;当句柄被绑定到内核时，我们说它是“在途的”。&lt;/p&gt;
&lt;p&gt;在用户模式下，句柄只是某个系统调用返回的特定数字。只有非在途的句柄对用户模式是可见的。&lt;/p&gt;
&lt;p&gt;表示句柄的整数只对该进程有意义。另一个进程中的相同数字可能不会映射到任何句柄，也可能映射到指向完全不同内核对象的句柄。&lt;/p&gt;
&lt;p&gt;句柄是任何32位的整数值, 例外的是 ZX_HANDLE_INVALID，它的值总是0。除此之外，一个有效句柄的整数值总是有两个最不重要的位。
表示这些位的掩码可以使用ZX_HANDLE_FIXED_BITS_MASK来访问。&lt;/p&gt;
&lt;p&gt;对于内核模式，句柄是一个c++对象，它包含三个逻辑字段:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对内核对象的引用&lt;/li&gt;
&lt;li&gt;对其绑定到的内核对象(或绑定到内核的进程)的权限&lt;/li&gt;
&lt;li&gt;它绑定到的进程(或者它绑定到内核)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;“权限”规定了允许对内核对象进行哪些操作。一个进程可能对同一个内核对象有两个具有不同的权限的句柄。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://trevorch.github.io/images/fuchsia/kernel/handles/handle-creation1.png&#34; alt=&#34;handle-creation1&#34;&gt;
图1: 用户进程开始创建句柄。
&lt;img src=&#34;https://trevorch.github.io/images/fuchsia/kernel/handles/handle-creation2.png&#34; alt=&#34;handle-creation1&#34;&gt;
图2: 用户进程使用系统调用创建内核对象(例如，一个事件)，并持有该对象的整数引用。
&lt;img src=&#34;https://trevorch.github.io/images/fuchsia/kernel/handles/handle-creation3.png&#34; alt=&#34;handle-creation1&#34;&gt;
图3: 句柄被创建后带有一组基本权限和适用于内核对象的任何附加权限。
&lt;img src=&#34;https://trevorch.github.io/images/fuchsia/kernel/handles/handle-creation4.png&#34; alt=&#34;handle-creation1&#34;&gt;
图4: 可以复制句柄。在此过程中可以删除权限。&lt;/p&gt;
&lt;h4 id=&#34;使用句柄-1&#34;&gt;使用句柄&lt;/h4&gt;
&lt;p&gt;创建新内核对象并返回其句柄的系统调用有很多。举几个例子:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;zx_event_create()&lt;/li&gt;
&lt;li&gt;zx_process_create()&lt;/li&gt;
&lt;li&gt;zx_thread_create()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些调用创建内核对象和指向它的第一个句柄。&lt;/p&gt;
&lt;h4 id=&#34;垃圾回收-1&#34;&gt;垃圾回收&lt;/h4&gt;
&lt;h4 id=&#34;特殊情况-1&#34;&gt;特殊情况&lt;/h4&gt;
&lt;h4 id=&#34;无效句柄及句柄重用-1&#34;&gt;无效句柄及句柄重用&lt;/h4&gt;
&lt;h4 id=&#34;更多-1&#34;&gt;更多&lt;/h4&gt;
</description>
      
    </item>
    
    <item>
      <title>Zircon 与 LK</title>
      <link>https://trevorch.github.io/post/fuchsia/kernel/zx_and_lk/</link>
      <pubDate>Wed, 22 Apr 2020 00:26:16 +0800</pubDate>
      
      <guid>https://trevorch.github.io/post/fuchsia/kernel/zx_and_lk/</guid>
      
        <description>&lt;p&gt;Zircon是LK的一个分支，它的许多内部结构都是基于LK的，而上层则是新的。例如，Zircon有进程的概念，而LK没有。
然而，Zircon进程是由LK级别的结构组成的，如LK的thread_t。&lt;/p&gt;
&lt;p&gt;LK是为嵌入式应用程序中通常使用的小型系统设计的内核。它是FreeRTOS或ThreadX等商业产品的一个很好的替代品。
这样的系统通常只有非常有限的ram、一组固定的外围设备和一组有限的任务。&lt;/p&gt;
&lt;p&gt;另一方面，Zircon的目标是拥有高速处理器的现代手机和现代个人电脑，以及具有任意外设的非平凡内存(ram)来进行开放式计算。&lt;/p&gt;
&lt;p&gt;更具体地说，一些明显的区别是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LK可以在32位系统中运行。 Zircon仅支持64位。&lt;/li&gt;
&lt;li&gt;Zircon具有一流的用户模式支持。 LK没有。&lt;/li&gt;
&lt;li&gt;Zircon具有基于功能的安全模型。 在LK中，所有代码都是受信任的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;随着时间的推移，甚至低层次的构造也发生了变化，以适应新的需求并更好地适应系统的其余部分。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Zircon 内核概念</title>
      <link>https://trevorch.github.io/post/fuchsia/kernel/concepts/</link>
      <pubDate>Mon, 20 Apr 2020 23:47:04 +0800</pubDate>
      
      <guid>https://trevorch.github.io/post/fuchsia/kernel/concepts/</guid>
      
        <description>&lt;h2 id=&#34;主要内容&#34;&gt;主要内容&lt;/h2&gt;
&lt;blockquote&gt;
&lt;h4 id=&#34;简介&#34;&gt;简介&lt;/h4&gt;
&lt;h4 id=&#34;系统调用&#34;&gt;系统调用&lt;/h4&gt;
&lt;h4 id=&#34;句柄及权限&#34;&gt;句柄及权限&lt;/h4&gt;
&lt;h4 id=&#34;内核对象id&#34;&gt;内核对象ID&lt;/h4&gt;
&lt;h4 id=&#34;运行中的代码jobprocessthread&#34;&gt;运行中的代码:Job,Process,Thread&lt;/h4&gt;
&lt;h4 id=&#34;消息传递socket及channel&#34;&gt;消息传递:Socket及Channel&lt;/h4&gt;
&lt;h4 id=&#34;对象及信号&#34;&gt;对象及信号&lt;/h4&gt;
&lt;h4 id=&#34;等待等一个等多个端口&#34;&gt;等待:等一个,等多个,端口&lt;/h4&gt;
&lt;h4 id=&#34;事件事件对&#34;&gt;事件,事件对&lt;/h4&gt;
&lt;h4 id=&#34;共享内存虚拟内存对象vmo&#34;&gt;共享内存:虚拟内存对象(VMO)&lt;/h4&gt;
&lt;h4 id=&#34;地址空间管理&#34;&gt;地址空间管理&lt;/h4&gt;
&lt;h4 id=&#34;futexes-同步机制&#34;&gt;Futexes 同步机制&lt;/h4&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;简介-1&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;内核管理着许多不同类型的对象。可通过系统调用直接访问那些实现了Dispatcher接口的C++类，这些类在kernel/object中实现，其中多数是自包含的高级对象，有一些包装了低级的lk原语。&lt;/p&gt;
&lt;h2 id=&#34;系统调用-1&#34;&gt;系统调用&lt;/h2&gt;
&lt;p&gt;用户空间代码通过系统调用与内核对象交互，且几乎完全通过句柄实现。在用户空间中，句柄使用32位的整数表示(zx_handle_t类型)。
当执行系统调用时，内核检查此句柄在当前调用进程的句柄表中引用的真实句柄。内核进一步检查真实句柄的类型正确性(向一个接收事件句柄的系统调用传递
线程句柄会导致报错)，且此句柄有执行所请求操作的权限。&lt;/p&gt;
&lt;p&gt;从访问的角度看，系统调用分为三大类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无限制的调用：数量较少，例如zx_clock_get()及zx_nanosleep()可被任何线程调用;&lt;/li&gt;
&lt;li&gt;使用句柄作第一参数的调用，参数就是被操作对象：数量占了大部分，例如zx_channel_write()及zx_port_queue();&lt;/li&gt;
&lt;li&gt;创建对象且无句柄参数的调用：例如zx_event_create()及zx_channel_create()，对它们的访问和限制由调用进程所在的Job控制。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;系统调用由libzircon.so提供，它是Zircon内核向用户空间提供的一个虚拟共享库，广为人知的叫法是虚拟动态共享对象(vDSO)。它们
是C ELF ABI函数，命名形式：zx_noun_verb()或zx_noun_verb_direct-object()。&lt;/p&gt;
&lt;p&gt;系统调用以FIDL的形式定义在//zircon/vdso中。这些定义先被fidlc处理，然后由kazoo从fidlc获取IR表示并输出各种格式，
这些输出在VDSO、内核等等中被作为胶水使用。&lt;/p&gt;
&lt;h2 id=&#34;句柄及权限-1&#34;&gt;句柄及权限&lt;/h2&gt;
&lt;p&gt;对象可被多个句柄(在一个或多个进程中)引用;&lt;/p&gt;
&lt;p&gt;对大部分对象来说，当最后一个引用此对象的句柄被关闭时，这个对象要么被销毁，要么被置为不可撤销的最终状态。&lt;/p&gt;
&lt;p&gt;句柄可通过写入通道(使用zx_channel_wirte(),或在一个新进程的第一个线程中使用zx_process_start()传递一个句柄)
的方式从一个进程移动到另一个进程。&lt;/p&gt;
&lt;p&gt;在句柄或它所引用的对象上的可执行的操作是由与此句柄关联的权限控制的。引用同一个对象的两个句柄可以有不一样的权限。&lt;/p&gt;
&lt;p&gt;当在代码中把句柄传递进来时，可用zx_handle_duplicate()及zx_handle_replace()这两个系统调用来获取引用同一对象的额外句柄，
且可选择减权。zx_handle_close()系统调用用于关闭句柄，并在其是所引用对象的最后一个引用的情况下释放其所引用的对象。
zx_handle_close_many()系统调用用于关闭一组句柄。&lt;/p&gt;
&lt;h2 id=&#34;内核对象id-1&#34;&gt;内核对象ID&lt;/h2&gt;
&lt;p&gt;内核中的每个对象都有一个内核对象ID(简称koid)，它是一个64位无符号整数，可用于标识对象，且在运行时系统的整个生命周期中唯一。
这意味着koid是不会被重用的。&lt;/p&gt;
&lt;p&gt;有两种特别的koid值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ZX_KOID_INVALID: 值为0且被用作“null”哨兵;&lt;/li&gt;
&lt;li&gt;ZX_KOID_KERNEL: 只有一个内核，且内核有自己的koid.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;内核生成的koid只使用63位，这为人为设置koid留出了余地。内核生成koid的分配顺序是未被指定的，且这是一个未来会变化的部分。&lt;/p&gt;
&lt;p&gt;人为koid的存在是为了支持诸如标识人为对象、追踪虚拟线程，这些由工具类使用的东西。人为koid的分配由每个程序来定，本文档不作任何规定或惯例约束。&lt;/p&gt;
&lt;h2 id=&#34;运行中的代码jobprocessthread-1&#34;&gt;运行中的代码:Job,Process,Thread&lt;/h2&gt;
&lt;p&gt;线程表示在一个地址空间中的执行(CPU寄存器、栈等等)，地址空间进程，线程属于进程，进程属于Job，Job定义了各种资源限制，Job又属于父Job，所有Job
都可以溯根至Root Job。Root Job由内核在启动时创建，并传递给第一个开始执行的用户空间进程：userboot。&lt;/p&gt;
&lt;p&gt;如果没有Job句柄，则进程中的线程不可能创建另外一个进程或另外一个Job。&lt;/p&gt;
&lt;p&gt;程序加载功能是由内核层之上的用户空间基础设施和协议提供的。&lt;/p&gt;
&lt;p&gt;参考：zx_process_create(), zx_process_start(), zx_thread_create(), zx_thread_start()&lt;/p&gt;
&lt;h2 id=&#34;消息传递socket及channel-1&#34;&gt;消息传递:Socket及Channel&lt;/h2&gt;
&lt;p&gt;Socket和Channel都是IPC对象，它们是可以两端双向使用的。创建Socket或Channel对象时会返回两个句柄，分别指向这个对象的两个端点。&lt;/p&gt;
&lt;p&gt;Socket是面向流的，且数据可以以一个或多个字节为单元写入或读出。短写(假设Socket的缓冲已满)及短读(假设请求的数据比缓冲中的要多)都是可以的。&lt;/p&gt;
&lt;p&gt;Channel是面向数据报的，且有最大消息大小(由ZX_CHANNEL_MAX_MSG_BYTES控制)，且消息被句柄引用有最大数量限制
(由ZX_CHANNEL_MAX_MSG_HANDLES控制)。不支持短写及短读。&lt;/p&gt;
&lt;p&gt;当句柄被写入Channel时，此句柄会从写进程中移除。当接收进程读取带有句柄的消息时，此句柄会被添加到此进程中。在写和读两个事件之间，句柄是
持续存在的(确保句柄所引用的对象一直都在)，除非被写入通道的另一端已经关闭(此时，消息会被另一端丢弃且消息中包含的句柄会被关闭，进而导致所引用的
对象被销毁)。&lt;/p&gt;
&lt;p&gt;参考：zx_channel_create(), zx_channel_read(), zx_channel_write(), zx_channel_call(), zx_socket_create(), zx_socket_read(), zx_socket_write()&lt;/p&gt;
&lt;h2 id=&#34;对象及信号-1&#34;&gt;对象及信号&lt;/h2&gt;
&lt;p&gt;对象最多可有32个信号(使用zx_signalst类型表示，且由ZXSIGNAL定义), 这些信号表示关于它们的一段信息。例如Channel和Socket可以是READABLE或
WRITABLE，进程或线程可以是TERMINATED的，等等。&lt;/p&gt;
&lt;p&gt;线程可以在一个或多个对象上等待信号以变成激活状态。&lt;/p&gt;
&lt;h2 id=&#34;等待等一个等多个端口-1&#34;&gt;等待:等一个,等多个,端口&lt;/h2&gt;
&lt;p&gt;线程可在单个句柄上使用zx_object_wait_one()来等待信号以被激活，或在多个句柄上使用zx_object_wait_many()来等待信号以被激活。
两种方式都支持在超时后返回(即使没有任何待处理信号)。&lt;/p&gt;
&lt;p&gt;由于时间松弛的存在，超时可能会偏离指定的最终时间。具体参考时间松弛相关内容。&lt;/p&gt;
&lt;p&gt;如果线程需要等待大量的句柄，使用Port是更为有效的方式。其它对象可绑定到Port对象上，当这些对象上有信号时，这个Port对象会接收到
包含待处理信号的数据包。&lt;/p&gt;
&lt;p&gt;参考：zx_port_create(), zx_port_queue(), zx_port_wait(), zx_port_cancel().&lt;/p&gt;
&lt;h2 id=&#34;事件事件对-1&#34;&gt;事件,事件对&lt;/h2&gt;
&lt;p&gt;事件是最简单的对象，除了它的活动信号集合没有其他状态。&lt;/p&gt;
&lt;p&gt;事件对是一对可以相互发出信号的事件。事件对的一个有用属性是，
当一个事件对的一端离开时(对它的所有句柄都已关闭)，对等端关闭信号在另一端被断言。&lt;/p&gt;
&lt;p&gt;参考：zx_event_create(), zx_eventpair_create()&lt;/p&gt;
&lt;h2 id=&#34;共享内存虚拟内存对象vmo-1&#34;&gt;共享内存:虚拟内存对象(VMO)&lt;/h2&gt;
&lt;p&gt;虚拟内存对象表示一组内存物理页，或潜在的页面(将按需懒惰地创建/填充)。&lt;/p&gt;
&lt;p&gt;可以使用zx_vmar_map()将它们映射到进程的地址空间中，以及使用zx_vmar_unmap解除映射。
映射页面的权限可以使用zx_vmar_protect()进行调整。&lt;/p&gt;
&lt;p&gt;也可以使用zx vmo read()和zx vmo write()直接读写VMO。因此，像“创建一个VMO，向其中写入数据集，
并将其交给另一个进程使用”这样的一次性操作可以避免将它们映射到地址空间的成本。&lt;/p&gt;
&lt;h2 id=&#34;地址空间管理-1&#34;&gt;地址空间管理&lt;/h2&gt;
&lt;p&gt;虚拟内存地址区域(VMAR)提供了管理进程地址空间的抽象。在创建进程时，指向Root VMAR的句柄被交给进程创建者。
该句柄引用了一个跨越整个地址空间的VMAR。这个空间可以通过zx_vmar映射()和zx_vmar_allocate()接口来划分。
zx_vmar_allocation()可用于生成新的VMAR(称为子区域)，这些VMARs可用于将地址空间的各个部分分组在一起。&lt;/p&gt;
&lt;p&gt;参考：zx_vmar_map(), zx_vmar_allocate(), zx_vmar_protect(), zx_vmar_unmap(), zx_vmar_destroy(),&lt;/p&gt;
&lt;h2 id=&#34;futexes-同步机制-1&#34;&gt;Futexes 同步机制&lt;/h2&gt;
&lt;p&gt;Futexes是与用户空间原子操作一起使用的内核原语，用于实现高效的同步原语。例如，在争用情况下只需要进行一次系统调用的互斥锁。
通常标准库的实现者对它们感兴趣。Zircon的libc和libc++为【互斥对象】、【条件变量】等提供了C11、c++和pthread的接口，并使用Futexes实现。&lt;/p&gt;
&lt;p&gt;参考：zx_futex_wait(), zx_futex_wake(), zx_futex_requeue().&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Archlinux 安装及配置</title>
      <link>https://trevorch.github.io/post/linux/archlinux/install/</link>
      <pubDate>Sat, 28 Mar 2020 12:40:24 +0800</pubDate>
      
      <guid>https://trevorch.github.io/post/linux/archlinux/install/</guid>
      
        <description>&lt;h2 id=&#34;下载archlinux-iso镜像&#34;&gt;下载Archlinux ISO镜像&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://mirrors.163.com/archlinux/iso/2020.03.01/archlinux-2020.03.01-x86_64.iso&#34;&gt;http://mirrors.163.com/archlinux/iso/2020.03.01/archlinux-2020.03.01-x86_64.iso&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;安装virtualbox&#34;&gt;安装VirtualBox&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://download.virtualbox.org/virtualbox/6.1.4/VirtualBox-6.1.4-136177-Win.exe&#34;&gt;https://download.virtualbox.org/virtualbox/6.1.4/VirtualBox-6.1.4-136177-Win.exe&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;创建virtualbox虚拟机并挂载archlinux镜像启动虚拟机&#34;&gt;创建VirtualBox虚拟机，并挂载Archlinux镜像，启动虚拟机&lt;/h2&gt;
&lt;h2 id=&#34;分区&#34;&gt;分区&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;分区方案：
sda1----200M----/boot
sda2----1G------swap
sda3----剩余空间------/

#fdisk /dev/sda
创建sda1分区：
输入n
回车
输入开始扇区,默认回车
输入结束扇区，要创建200M的分区,应该输入：+200M；

创建sda2分区：
输入n
回车
输入开始扇区,默认回车
输入结束扇区，要创建1G的分区,应该输入：+1G；

创建sda3分区：
输入n
回车
输入开始扇区,默认回车
输入结束扇区，使用剩余全部空间，回车；
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;格式化分区并挂载&#34;&gt;格式化分区并挂载&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# mkfs.ext4 /dev/sda1
# mkfs.ext4 /dev/sda3
# mkswap /dev/sda2
# swapon /dev/sda2
# 
# mount /dev/sda3 /mnt
# mkdir /mnt/boot
# mount /dev/sda1 /mnt/boot
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;修改镜像源&#34;&gt;修改镜像源&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# nano /etc/pacman.d/mirrorlist
在最顶处添加：
Server = https://mirrors.163.com/archlinux/$repo/os/$arch
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;安装基本系统&#34;&gt;安装基本系统&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# pacstrap /mnt base base-devel
# pacman -Syu # 更新
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;配置系统&#34;&gt;配置系统&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;安装grub引导程序
# pacstrap /mnt grub-bios
生成系统挂载表
# genfstab -p /mnt &amp;gt;&amp;gt; /mnt/etc/fstab
切到新安装的系统
# arch-chroot /mnt /bin/bash
安装nano编辑器
# pacman -S nano
设置系统语言
# nano /etc/locale.gen  -- 去掉以下两行前的注释：
en_US.UTF-8 UTF-8
zh_CN.UTF-8 UTF-8
# locale-gen   -- 生成区域语言文件
echo LANG=en_US.UTF-8 &amp;gt; /etc/locale.conf
export LANG=en_US.UTF-8
设置时区
# ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
# hwclock --systohc --utc         -- 调整硬件时钟
更改主机名
# echo trevor &amp;gt; /etc/hostname
安装ssh服务
# pacman -Sy openssh
# systemctl enable sshd.serice
更改root密码
# passwd root
添加新用户
# useradd -m -g users -G wheel -s /bin/bash trevor
# passwd trevor
# nano /etc/sudoers # 添加超级权限 在root ALL=(ALL) ALL后添加一行：
trevor ALL=(ALL) ALL
#配置引导
# grub-install /dev/sda
# grub-mkconfig -o /boot/grub/grub.cfg
#创建一个初始 RAM disk
mkinitcpio -p linux
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;至此，就可以了！&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>M0 M1 M2 M3</title>
      <link>https://trevorch.github.io/post/monetary-economics/m0-m1-m2-m3/</link>
      <pubDate>Sun, 22 Mar 2020 11:49:42 +0800</pubDate>
      
      <guid>https://trevorch.github.io/post/monetary-economics/m0-m1-m2-m3/</guid>
      
        <description>&lt;h3 id=&#34;基础概念&#34;&gt;基础概念&lt;/h3&gt;
&lt;h4 id=&#34;利率&#34;&gt;利率&lt;/h4&gt;
&lt;p&gt;也称“利息率”，指一定时期内利息额与本金额的比率。利率有年利率、月利率和日利率三种表现形式：&lt;br&gt;
年利率：按本金百分比表示，在中国称为“分”；&lt;br&gt;
月利率：按本金千分比表示，在中国称为“厘”；&lt;br&gt;
日利率：按本金万分比表示，在中国称为“毫”。&lt;br&gt;
计算公式：利率=利息额/本金额&lt;/p&gt;
&lt;h4 id=&#34;浮动利率&#34;&gt;浮动利率&lt;/h4&gt;
&lt;p&gt;基准利率是人民银行公布的商业银行存款、贷款、贴现等业务的指导性利率。各金融机构的利率允许：&lt;br&gt;
存款利率可以在基准利率基础上下浮10%；&lt;br&gt;
贷款利率可以在基准利率基础上下浮20%。&lt;/p&gt;
&lt;h3 id=&#34;货币供给与需求&#34;&gt;货币供给与需求&lt;/h3&gt;
&lt;h4 id=&#34;现金&#34;&gt;现金&lt;/h4&gt;
&lt;p&gt;也称“通货”，它：&lt;br&gt;
是政府授权发行的不兑现的银行券和辅币；&lt;br&gt;
是一国的法偿货币；&lt;br&gt;
是央行提供基础货币的主要形式。&lt;/p&gt;
&lt;h4 id=&#34;货币层次&#34;&gt;货币层次&lt;/h4&gt;
&lt;p&gt;根据货币流动性原则，以存款及其信用工具转换为现金所需时间和成本作为标准，对货币划分的层次。&lt;br&gt;
央行为了便于进行宏观经济运行监测和货币政策操作，按照不同的统计口径确定不同的货币供应量。&lt;br&gt;
中国的具体层次如下：
M0=现金；&lt;br&gt;
M1=现金 + 活期存款(一般不包括官方机构和外国银行在商业银行的存款)；&lt;br&gt;
M2=M1 + 准货币 + 可转让存单。准货币指除了活期存款以外的一切公私存款；&lt;br&gt;
M3=M2 + CD + 长于隔夜的限期回购协议和欧洲美元；&lt;br&gt;
M4=M3 + 定期存款 + 私人部门持有的建房互助协会的股份，这是英国英格兰银行公布的一个货币口径；&lt;br&gt;
L=M3 + 非银行公众持有的储蓄券 + 短期国库券 + 商业票据 + 银行承兑票据。&lt;/p&gt;
&lt;h4 id=&#34;狭义货币&#34;&gt;狭义货币&lt;/h4&gt;
&lt;p&gt;流通中的现金与商业银行活期存款的总和，即狭义货币供应量，它是央行制定及执行货币政策的主要观测依据。&lt;br&gt;
现金是法定通货的存在形式；&lt;br&gt;
商业银行活期存款，存款人随时可签发支票进行转让或流通，具有支付手段和流通手段两种职能，存款通货。&lt;br&gt;
侠义货币用M1表示： M1=M0(流通中的货币)+企业活期存款+机关团体部队存款+农村存款。&lt;/p&gt;
&lt;h4 id=&#34;广义货币&#34;&gt;广义货币&lt;/h4&gt;
&lt;p&gt;狭义货币(M1)和商业银行定期存款的总和。&lt;br&gt;
由于各种定期存款一向可以提前支取转化为现实购买力，把它算作货币，可以更全面地反映货币流通状况，便于分析和控制市场金融活动。&lt;br&gt;
以此类推，储蓄存款、可转让定期存单、易转手的短期债券等作为具有通货性质的准货币，也可按其流动性状况囊括进来，通常用M2、M3作代号进行分类统计，依次递增的准货币在流动性上依次递减。&lt;/p&gt;
&lt;h4 id=&#34;基础货币&#34;&gt;基础货币&lt;/h4&gt;
&lt;p&gt;也称“货币基数”、“货币基础”、“强力货币”或“高能货币”，经过商业银行的存货款业务而能扩张或收缩货币供应量的货币。&lt;br&gt;
西方国家的基础货币包括商业银行存入央行的存款准备金(包括法定准备金和超额准备金)与社会公众所持有的现金之和。&lt;br&gt;
央行通过调节基础货币的数量就能数倍扩张或收缩货币供应量，因此：&lt;br&gt;
&lt;strong&gt;基础货币构成市场货币供应量的基础，因其是一种活动力强大的货币，具有高能量，故亦称之为“强力货币”或“高能货币”。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;货币乘数&#34;&gt;货币乘数&lt;/h4&gt;
&lt;p&gt;央行提供的基础货币与货币供应量扩张关系的数量表现。即央行扩大或缩小一定数量的基础货币之后，能使货币供应总量扩大或缩小的比值。亦称基础货币的扩张倍数。&lt;br&gt;
基本计算公式：Ms=Bm&lt;/p&gt;
&lt;h4 id=&#34;超额准备金&#34;&gt;超额准备金&lt;/h4&gt;
&lt;p&gt;商业银行或存款机构在货币当局规定必须缴纳的法定准备金之外，保留的一部分准备金。&lt;br&gt;
商业银行保留超额准备金主要是解决意外的大额提现、结清存款或避免错过更好的投资机会。&lt;br&gt;
&lt;strong&gt;超额准备金的变动将影响到货币的乘数大小，在基础货币供应量不变的情况下，它制约着银行体系创造货币的能力。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;货币流通速度&#34;&gt;货币流通速度&lt;/h4&gt;
&lt;p&gt;同一单位的货币在一定时期内充当流通的次数。&lt;br&gt;
&lt;strong&gt;它是决定商品流通过程中所需要货币量的重要因素之一，并且能在一定程度上弥补流通中货币数量的不足。&lt;/strong&gt;&lt;br&gt;
现实中对货币流通速度测定，主要根据不同层次货币与相应商品的流通，确定各层次货币的流通速度，如：&lt;br&gt;
以商品零售额与现金余额的比值，测定这时期现金的流通速度；
以国民生产总值与M1或M2的比值，测定M1或M2的流通速度。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Go 程序编译成不同平台的执行文件</title>
      <link>https://trevorch.github.io/post/go/env/compile/</link>
      <pubDate>Thu, 19 Mar 2020 19:42:17 +0800</pubDate>
      
      <guid>https://trevorch.github.io/post/go/env/compile/</guid>
      
        <description>&lt;h3 id=&#34;go程序可编译成不同平台的可执行文件&#34;&gt;Go程序可编译成不同平台的可执行文件&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;set GOARCH=amd64
set GOOS=linux
go build xx.go
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样生成的文件没有任何依赖，直接运行就可以了！&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Docker Machine 安装及配置</title>
      <link>https://trevorch.github.io/post/docker/machine/install/</link>
      <pubDate>Wed, 18 Mar 2020 10:53:44 +0800</pubDate>
      
      <guid>https://trevorch.github.io/post/docker/machine/install/</guid>
      
        <description>&lt;h2 id=&#34;安装virtualbox&#34;&gt;安装VirtualBox&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://download.virtualbox.org/virtualbox/6.1.4/VirtualBox-6.1.4-136177-Win.exe&#34;&gt;https://download.virtualbox.org/virtualbox/6.1.4/VirtualBox-6.1.4-136177-Win.exe&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;下载-docker-machine&#34;&gt;下载 Docker Machine&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/docker/machine/releases/download/v0.16.2/docker-machine-Windows-x86_64.exe&#34;&gt;https://github.com/docker/machine/releases/download/v0.16.2/docker-machine-Windows-x86_64.exe&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;放置至 D:\Docker\Machine\0.16.2 并重命名为 dm.exe
&lt;img src=&#34;https://trevorch.github.io/static/images/docker/docker-machine/install/01.png&#34; alt=&#34;avatar&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;配置环境变量&#34;&gt;配置环境变量&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;把 D:\Docker\Machine\0.16.2 添加到path环境变量；&lt;/li&gt;
&lt;li&gt;删除path环境变量中带OpenSSH的项，否则会导致Docker Machine卡在  Waiting for an IP&amp;hellip;;&lt;/li&gt;
&lt;li&gt;新建环境变量 MACHINE_STORAGE_PATH 指定docker机器存储位置。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;boot2dockeriso-镜像配置&#34;&gt;boot2docker.iso 镜像配置&lt;/h2&gt;
&lt;p&gt;下载最新版nginx:
&lt;a href=&#34;http://nginx.org/download/nginx-1.17.9.zip&#34;&gt;http://nginx.org/download/nginx-1.17.9.zip&lt;/a&gt;
解压nginx至某一目录，并启动nginx&lt;/p&gt;
&lt;p&gt;下载最新版boot2docker.iso:
&lt;a href=&#34;https://github.com/boot2docker/boot2docker/releases&#34;&gt;https://github.com/boot2docker/boot2docker/releases&lt;/a&gt;
放置于nginx的html目录中&lt;/p&gt;
&lt;h2 id=&#34;使用docker-machine部署一台机器&#34;&gt;使用Docker Machine部署一台机器&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;打开cmd命令行界面，输入命令：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;dm create  -d &amp;quot;virtualbox&amp;quot; \
--engine-registry-mirror https://3laho3y3.mirror.aliyuncs.com \
--engine-registry-mirror http://f1361db2.m.daocloud.io \
--engine-registry-mirror https://reg-mirror.qiniu.com \
--engine-registry-mirror http://hub-mirror.c.163.com \
--engine-registry-mirror https://registry.docker-cn.com \
--engine-registry-mirror https://mirror.ccs.tencentyun.com \
--engine-registry-mirror https://dockerhub.azk8s.cn \
--virtualbox-memory &amp;quot;2048&amp;quot; \
--virtualbox-boot2docker-url http://localhost/tool/boot2docker.iso  \
vm1
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;执行过程如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;C:\Users\Trevorch&amp;gt;dm create  -d &amp;quot;virtualbox&amp;quot; --engine-registry-mirror https://3laho3y3.mirror.aliyuncs.com --engine-registry-mirror http://f1361db2.m.daocloud.io --engine-registry-mirror https://reg-mirror.qiniu.com --engine-registry-mirror http://hub-mirror.c.163.com --engine-registry-mirror https://registry.docker-cn.com --engine-registry-mirror https://mirror.ccs.tencentyun.com --engine-registry-mirror https://dockerhub.azk8s.cn --virtualbox-memory &amp;quot;2048&amp;quot; --virtualbox-boot2docker-url http://localhost/tool/boot2docker.iso  vm1
Running pre-create checks...
Creating machine...
(vm1) Downloading F:\vms\cache\boot2docker.iso from http://localhost/tool/boot2docker.iso...
(vm1) 0%....10%....20%....30%....40%....50%....60%....70%....80%....90%....100%
(vm1) Creating VirtualBox VM...
(vm1) Creating SSH key...
(vm1) Starting the VM...
(vm1) Check network to re-create if needed...
(vm1) Windows might ask for the permission to configure a dhcp server. Sometimes, such confirmation window is minimized in the taskbar.
(vm1) Waiting for an IP...
Waiting for machine to be running, this may take a few minutes...
Detecting operating system of created instance...
Waiting for SSH to be available...
Detecting the provisioner...
Provisioning with boot2docker...
Copying certs to the local machine directory...
Copying certs to the remote machine...
Setting Docker configuration on the remote daemon...
Checking connection to Docker...
Docker is up and running!
To see how to connect your Docker Client to the Docker Engine running on this virtual machine, run: dm env vm1
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;登录docker机器并查看环境信息：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;C:\Users\Trevorch&amp;gt;dm ssh vm1
   ( &#39;&amp;gt;&#39;)
  /) TC (\   Core is distributed with ABSOLUTELY NO WARRANTY.
 (/-_--_-\)           www.tinycorelinux.net

docker@vm1:~$ docker info
Client:
 Debug Mode: false

Server:
 Containers: 1
  Running: 1
  Paused: 0
  Stopped: 0
 Images: 1
 Server Version: 19.03.5
 Storage Driver: overlay2
  Backing Filesystem: extfs
  Supports d_type: true
  Native Overlay Diff: true
 Logging Driver: json-file
 Cgroup Driver: cgroupfs
 Plugins:
  Volume: local
  Network: bridge host ipvlan macvlan null overlay
  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog
 Swarm: inactive
 Runtimes: runc
 Default Runtime: runc
 Init Binary: docker-init
 containerd version: b34a5c8af56e510852c35414db4c1f4fa6172339
 runc version: 3e425f80a8c931f88e6d94a8c831b9d5aa481657
 init version: fec3683
 Security Options:
  seccomp
   Profile: default
 Kernel Version: 4.14.154-boot2docker
 Operating System: Boot2Docker 19.03.5 (TCL 10.1)
 OSType: linux
 Architecture: x86_64
 CPUs: 1
 Total Memory: 1.951GiB
 Name: vm1
 ID: 7SHL:Y3WY:Z4WI:B7ZY:LSTV:CT6J:ZFZU:MH2A:MFSP:4GE4:GB4I:R6JE
 Docker Root Dir: /mnt/sda1/var/lib/docker
 Debug Mode: false
 Registry: https://index.docker.io/v1/
 Labels:
  provider=virtualbox
 Experimental: false
 Insecure Registries:
  127.0.0.0/8
 Registry Mirrors:
  https://3laho3y3.mirror.aliyuncs.com/
  http://f1361db2.m.daocloud.io/
  https://reg-mirror.qiniu.com/
  http://hub-mirror.c.163.com/
  https://registry.docker-cn.com/
  https://mirror.ccs.tencentyun.com/
  https://dockerhub.azk8s.cn/
 Live Restore Enabled: false
 Product License: Community Engine

docker@vm1:~$
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;至此，就可以使用docker环境了！&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Markdown 手册</title>
      <link>https://trevorch.github.io/post/markdown/manual/</link>
      <pubDate>Wed, 18 Mar 2020 10:53:44 +0800</pubDate>
      
      <guid>https://trevorch.github.io/post/markdown/manual/</guid>
      
        <description>&lt;h2 id=&#34;主要内容&#34;&gt;主要内容&lt;/h2&gt;
&lt;blockquote&gt;
&lt;h4 id=&#34;markdown是什么&#34;&gt;Markdown&lt;em&gt;是什么&lt;/em&gt;？&lt;/h4&gt;
&lt;h4 id=&#34;谁创造了它&#34;&gt;&lt;em&gt;谁&lt;/em&gt;创造了它？&lt;/h4&gt;
&lt;h4 id=&#34;为什么要使用它&#34;&gt;&lt;em&gt;为什么&lt;/em&gt;要使用它？&lt;/h4&gt;
&lt;h4 id=&#34;怎么使用&#34;&gt;&lt;em&gt;怎么&lt;/em&gt;使用？&lt;/h4&gt;
&lt;h4 id=&#34;谁在用&#34;&gt;&lt;em&gt;谁&lt;/em&gt;在用？&lt;/h4&gt;
&lt;h4 id=&#34;尝试一下&#34;&gt;尝试一下&lt;/h4&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文&lt;/h2&gt;
&lt;h3 id=&#34;1-markdown是什么&#34;&gt;1. Markdown&lt;em&gt;是什么&lt;/em&gt;？&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Markdown&lt;/strong&gt;是一种轻量级&lt;strong&gt;标记语言&lt;/strong&gt;，它以纯文本形式(&lt;em&gt;易读、易写、易更改&lt;/em&gt;)编写文档，并最终以HTML格式发布。 &lt;br&gt;
&lt;strong&gt;Markdown&lt;/strong&gt;也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。&lt;/p&gt;
&lt;h3 id=&#34;2-谁创造了它&#34;&gt;2. &lt;em&gt;谁&lt;/em&gt;创造了它？&lt;/h3&gt;
&lt;p&gt;它由&lt;a href=&#34;http://www.aaronsw.com/&#34;&gt;&lt;strong&gt;Aaron Swartz&lt;/strong&gt;&lt;/a&gt;和&lt;strong&gt;John Gruber&lt;/strong&gt;共同设计，&lt;strong&gt;Aaron Swartz&lt;/strong&gt;就是那位于去年（&lt;em&gt;2013年1月11日&lt;/em&gt;）自杀,有着&lt;strong&gt;开挂&lt;/strong&gt;一般人生经历的程序员。维基百科对他的&lt;a href=&#34;http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8&#34;&gt;介绍&lt;/a&gt;是：&lt;strong&gt;软件工程师、作家、政治组织者、互联网活动家、维基百科人&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;他有着足以让你跪拜的人生经历：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;14岁&lt;/strong&gt;参与RSS 1.0规格标准的制订。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2004&lt;/strong&gt;年入读&lt;strong&gt;斯坦福&lt;/strong&gt;，之后退学。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2005&lt;/strong&gt;年创建&lt;a href=&#34;http://infogami.org/&#34;&gt;Infogami&lt;/a&gt;，之后与&lt;a href=&#34;http://www.reddit.com/&#34;&gt;Reddit&lt;/a&gt;合并成为其合伙人。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2010&lt;/strong&gt;年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2011&lt;/strong&gt;年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2013&lt;/strong&gt;年1月自杀身亡。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://trevorch.github.io/static/images/markdown/manual/Aaron_Swartz.jpg&#34; alt=&#34;Aaron Swartz&#34;&gt;&lt;/p&gt;
&lt;p&gt;天才都有早逝的归途。&lt;/p&gt;
&lt;h3 id=&#34;3-为什么要使用它&#34;&gt;3. &lt;em&gt;为什么&lt;/em&gt;要使用它？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;它是易读（看起来舒服）、易写（语法简单）、易更改&lt;strong&gt;纯文本&lt;/strong&gt;。处处体现着&lt;strong&gt;极简主义&lt;/strong&gt;的影子。&lt;/li&gt;
&lt;li&gt;兼容HTML，可以转换为HTML格式发布。&lt;/li&gt;
&lt;li&gt;跨平台使用。&lt;/li&gt;
&lt;li&gt;越来越多的网站支持Markdown。&lt;/li&gt;
&lt;li&gt;更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）&lt;/li&gt;
&lt;li&gt;摆脱Word（我不是认真的）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-怎么使用&#34;&gt;4. &lt;em&gt;怎么&lt;/em&gt;使用？&lt;/h3&gt;
&lt;p&gt;如果不算&lt;strong&gt;扩展&lt;/strong&gt;，Markdown的语法绝对&lt;strong&gt;简单&lt;/strong&gt;到让你爱不释手。&lt;/p&gt;
&lt;p&gt;Markdown语法主要分为如下几大部分：
&lt;strong&gt;标题&lt;/strong&gt;，&lt;strong&gt;段落&lt;/strong&gt;，&lt;strong&gt;区块引用&lt;/strong&gt;，&lt;strong&gt;代码区块&lt;/strong&gt;，&lt;strong&gt;强调&lt;/strong&gt;，&lt;strong&gt;列表&lt;/strong&gt;，&lt;strong&gt;分割线&lt;/strong&gt;，&lt;strong&gt;链接&lt;/strong&gt;，&lt;strong&gt;图片&lt;/strong&gt;，&lt;strong&gt;反斜杠 &lt;code&gt;\&lt;/code&gt;&lt;/strong&gt;，&lt;strong&gt;符号&#39;`&amp;rsquo;&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;41-标题&#34;&gt;4.1 标题&lt;/h4&gt;
&lt;p&gt;两种形式：&lt;br&gt;
1）使用&lt;code&gt;=&lt;/code&gt;和&lt;code&gt;-&lt;/code&gt;标记一级和二级标题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一级标题&lt;br&gt;
&lt;code&gt;=========&lt;/code&gt;&lt;br&gt;
二级标题 &lt;br&gt;
&lt;code&gt;---------&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;blockquote&gt;
&lt;h1 id=&#34;一级标题&#34;&gt;一级标题&lt;/h1&gt;
&lt;h2 id=&#34;二级标题&#34;&gt;二级标题&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;2）使用&lt;code&gt;#&lt;/code&gt;，可表示1-6级标题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# 一级标题&lt;br&gt;
## 二级标题&lt;br&gt;
### 三级标题&lt;br&gt;
#### 四级标题&lt;br&gt;
##### 五级标题&lt;br&gt;
###### 六级标题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;blockquote&gt;
&lt;h1 id=&#34;一级标题-1&#34;&gt;一级标题&lt;/h1&gt;
&lt;h2 id=&#34;二级标题-1&#34;&gt;二级标题&lt;/h2&gt;
&lt;h3 id=&#34;三级标题&#34;&gt;三级标题&lt;/h3&gt;
&lt;h4 id=&#34;四级标题&#34;&gt;四级标题&lt;/h4&gt;
&lt;h5 id=&#34;五级标题&#34;&gt;五级标题&lt;/h5&gt;
&lt;h6 id=&#34;六级标题&#34;&gt;六级标题&lt;/h6&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;42-段落&#34;&gt;4.2 段落&lt;/h4&gt;
&lt;p&gt;段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用&lt;strong&gt;两个以上&lt;/strong&gt;空格加上回车（引用中换行省略回车）。&lt;/p&gt;
&lt;h4 id=&#34;43-区块引用&#34;&gt;4.3 区块引用&lt;/h4&gt;
&lt;p&gt;在段落的每行或者只在第一行使用符号&lt;code&gt;&amp;gt;&lt;/code&gt;,还可使用多个嵌套引用，如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;gt; 区块引用&lt;br&gt;
&amp;gt;&amp;gt; 嵌套引用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;区块引用&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;嵌套引用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;44-代码区块&#34;&gt;4.4 代码区块&lt;/h4&gt;
&lt;p&gt;代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如 &lt;br&gt;
普通段落：&lt;/p&gt;
&lt;p&gt;void main() &lt;br&gt;
{ &lt;br&gt;
printf(&amp;ldquo;Hello, Markdown.&amp;quot;); &lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;代码区块：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void main()
{
    printf(&amp;quot;Hello, Markdown.&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;:需要和普通段落之间存在空行。&lt;/p&gt;
&lt;h4 id=&#34;45-强调&#34;&gt;4.5 强调&lt;/h4&gt;
&lt;p&gt;在强调内容两侧分别加上&lt;code&gt;*&lt;/code&gt;或者&lt;code&gt;_&lt;/code&gt;，如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;*斜体*，_斜体_ &lt;br&gt;
**粗体**，__粗体__&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;斜体&lt;/em&gt;，&lt;em&gt;斜体&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;粗体&lt;/strong&gt;，&lt;strong&gt;粗体&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;46-列表&#34;&gt;4.6 列表&lt;/h4&gt;
&lt;p&gt;使用&lt;code&gt;·&lt;/code&gt;、&lt;code&gt;+&lt;/code&gt;、或&lt;code&gt;-&lt;/code&gt;标记无序列表，如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;-（+*） 第一项
-（+*） 第二项
- （+*）第三项&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：标记后面最少有一个_空格_或_制表符_。若不在引用区块中，必须和前方段落之间存在空行。&lt;/p&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;第一项&lt;/li&gt;
&lt;li&gt;第二项&lt;/li&gt;
&lt;li&gt;第三项&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;有序列表的标记方式是将上述的符号换成数字,并辅以&lt;code&gt;.&lt;/code&gt;，如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1 . 第一项&lt;br&gt;
2 . 第二项 &lt;br&gt;
3 . 第三项&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;第一项&lt;/li&gt;
&lt;li&gt;第二项&lt;/li&gt;
&lt;li&gt;第三项&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;47-分割线&#34;&gt;4.7 分割线&lt;/h4&gt;
&lt;p&gt;分割线最常使用就是三个或以上&lt;code&gt;*&lt;/code&gt;，还可以使用&lt;code&gt;-&lt;/code&gt;和&lt;code&gt;_&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;48-链接&#34;&gt;4.8 链接&lt;/h4&gt;
&lt;p&gt;链接可以由两种形式生成：&lt;strong&gt;行内式&lt;/strong&gt;和&lt;strong&gt;参考式&lt;/strong&gt;。 &lt;br&gt;
&lt;strong&gt;行内式&lt;/strong&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[younghz的Markdown库](https:://github.com/younghz/Markdown &amp;ldquo;Markdown&amp;rdquo;)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https:://github.com/younghz/Markdown&#34; title=&#34;Markdown&#34;&gt;younghz的Markdown库&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;参考式&lt;/strong&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[younghz的Markdown库1][1] &lt;br&gt;
[younghz的Markdown库2][2] &lt;br&gt;
[1]:https:://github.com/younghz/Markdown &amp;ldquo;Markdown&amp;rdquo; &lt;br&gt;
[2]:https:://github.com/younghz/Markdown &amp;ldquo;Markdown&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https:://github.com/younghz/Markdown&#34; title=&#34;Markdown&#34;&gt;younghz的Markdown库1&lt;/a&gt; &lt;br&gt;
&lt;a href=&#34;https:://github.com/younghz/Markdown&#34; title=&#34;Markdown&#34;&gt;younghz的Markdown库2&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：上述的&lt;code&gt;[1]:https:://github.com/younghz/Markdown &amp;quot;Markdown&amp;quot;&lt;/code&gt;不出现在区块中。&lt;/p&gt;
&lt;h4 id=&#34;49-图片&#34;&gt;4.9 图片&lt;/h4&gt;
&lt;p&gt;添加图片的形式和链接相似，只需在链接的基础上前方加一个&lt;code&gt;！&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;410-反斜杠&#34;&gt;4.10 反斜杠&lt;code&gt;\&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;相当于&lt;strong&gt;反转义&lt;/strong&gt;作用。使符号成为普通符号。&lt;/p&gt;
&lt;h4 id=&#34;411-符号&#34;&gt;4.11 符号&#39;`&amp;rsquo;&lt;/h4&gt;
&lt;p&gt;起到标记作用。如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;`ctrl+a`&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;ctrl+a&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;5-谁在用&#34;&gt;5. &lt;em&gt;谁&lt;/em&gt;在用？&lt;/h4&gt;
&lt;p&gt;Markdown的使用者：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub&lt;/li&gt;
&lt;li&gt;简书&lt;/li&gt;
&lt;li&gt;Stack Overflow&lt;/li&gt;
&lt;li&gt;Apollo&lt;/li&gt;
&lt;li&gt;Moodle&lt;/li&gt;
&lt;li&gt;Reddit&lt;/li&gt;
&lt;li&gt;等等&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;6-尝试一下&#34;&gt;6. 尝试一下&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Chrome&lt;/strong&gt;下的插件诸如&lt;code&gt;stackedit&lt;/code&gt;与&lt;code&gt;markdown-here&lt;/code&gt;等非常方便，也不用担心平台受限。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在线&lt;/strong&gt;的dillinger.io评价也不错&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Windowns&lt;/strong&gt;下的MarkdownPad也用过，不过免费版的体验不是很好。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mac&lt;/strong&gt;下的Mou是国人贡献的，口碑很好。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Linux&lt;/strong&gt;下的ReText不错。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;当然，最终境界永远都是笔下是语法，心中格式化 :)。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。
虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]
(&lt;a href=&#34;http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/&#34;&gt;http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/&lt;/a&gt; )。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;以上基本是所有traditonal markdown的语法。&lt;/p&gt;
&lt;h3 id=&#34;其它&#34;&gt;其它：&lt;/h3&gt;
&lt;p&gt;列表的使用(非traditonal markdown)：&lt;/p&gt;
&lt;p&gt;用&lt;code&gt;|&lt;/code&gt;表示表格纵向边界，表头和表内容用&lt;code&gt;-&lt;/code&gt;隔开，并可用&lt;code&gt;:&lt;/code&gt;进行对齐设置，两边都有&lt;code&gt;:&lt;/code&gt;则表示居中，若不加&lt;code&gt;:&lt;/code&gt;则默认左对齐。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;代码库&lt;/th&gt;
&lt;th&gt;链接&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;MarkDown&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/younghz/Markdown&#34; title=&#34;Markdown&#34;&gt;https://github.com/younghz/Markdown&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;MarkDownCopy&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/younghz/Markdown&#34; title=&#34;Markdown&#34;&gt;https://github.com/younghz/Markdown&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;关于其它扩展语法可参见具体工具的使用说明。&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>
